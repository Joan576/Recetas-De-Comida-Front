{"ast":null,"code":"import { ref, onMounted } from 'vue';\nimport { username, login } from '../AuthStore'; // Importa `username` y `login`\nimport { storage } from \"../services/firebase\"; // Importa storage desde firebase.js\nimport { ref as storageRef, uploadBytes, getDownloadURL } from \"firebase/storage\"; // Importa funciones de Firebase Storage\n\nconst placeholderImage = '/avatar.png'; // Asegúrate de que esta ruta sea correcta\n\n// Función para abrir el selector de archivos al hacer clic en la imagen\n\nexport default {\n  __name: 'UserProfile',\n  setup(__props, {\n    expose: __expose\n  }) {\n    __expose();\n    const form = ref({\n      username: '',\n      description: '',\n      imagen_perfil: null\n    });\n    const errorMessage = ref('');\n    const successMessage = ref('');\n    const imageUrl = ref(''); // URL de la imagen de perfil\n    const userId = localStorage.getItem('userId'); // Recupera el userId del almacenamiento local\n\n    // Aquí defines el placeholderImage como ruta para la imagen por defecto\n    const triggerFileUpload = () => {\n      document.getElementById(\"imagen_perfil\").click();\n    };\n\n    // Función para manejar el cambio de archivo\n    const onFileChange = async e => {\n      const file = e.target.files[0];\n      if (file && (file.type === 'image/jpeg' || file.type === 'image/png')) {\n        try {\n          // Llama a la función para subir la imagen y obtener la URL\n          const uploadedImageUrl = await uploadProfileImage(file);\n          if (uploadedImageUrl) {\n            imageUrl.value = uploadedImageUrl;\n            form.value.imagen_perfil = uploadedImageUrl; // Guarda la URL en el formulario\n          }\n        } catch (error) {\n          errorMessage.value = 'Error al subir la imagen';\n        }\n      } else {\n        errorMessage.value = 'Solo se permiten archivos JPEG o PNG';\n      }\n    };\n\n    // Función para subir la imagen de perfil a Firebase Storage\n    const uploadProfileImage = async file => {\n      try {\n        // Crea una referencia de almacenamiento única para la imagen\n        const storageReference = storageRef(storage, `profile_images/${file.name}-${Date.now()}`);\n\n        // Sube la imagen a Firebase Storage\n        const snapshot = await uploadBytes(storageReference, file);\n\n        // Obtén la URL de descarga de la imagen\n        const downloadURL = await getDownloadURL(snapshot.ref);\n        return downloadURL;\n      } catch (error) {\n        console.error(\"Error al subir la imagen:\", error);\n        throw error;\n      }\n    };\n\n    // Cargar datos del perfil al montar el componente\n    onMounted(async () => {\n      try {\n        const response = await fetch(`http://localhost:4000/api/profile/${userId}`);\n        const profileData = await response.json(); // Cambié 'data' a 'profileData'\n        form.value.username = profileData.nombre_usuario; // Usa 'profileData'\n        form.value.description = profileData.descripcion || '';\n        imageUrl.value = profileData.imagen_perfil ? profileData.imagen_perfil : placeholderImage;\n      } catch (error) {\n        errorMessage.value = 'Error al cargar el perfil';\n      }\n    });\n    const handleUpdate = async () => {\n      try {\n        const response = await fetch(`http://localhost:4000/api/profile/${userId}`, {\n          method: 'PUT',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify(form.value) // Enviar el objeto form como JSON\n        });\n        if (!response.ok) {\n          throw new Error('Error en la solicitud al servidor');\n        }\n        await response.json(); // Se eliminó la asignación a 'data' que no se usaba\n        successMessage.value = 'Perfil actualizado con éxito';\n        errorMessage.value = '';\n\n        // Actualiza el nombre de usuario global\n        login({\n          username: form.value.username\n        });\n        username.value = form.value.username; // Actualiza también el `username`\n      } catch (error) {\n        errorMessage.value = 'Error en el servidor: ' + error.message;\n        successMessage.value = '';\n      }\n    };\n    const __returned__ = {\n      form,\n      errorMessage,\n      successMessage,\n      imageUrl,\n      userId,\n      placeholderImage,\n      triggerFileUpload,\n      onFileChange,\n      uploadProfileImage,\n      handleUpdate,\n      ref,\n      onMounted,\n      get username() {\n        return username;\n      },\n      get login() {\n        return login;\n      },\n      get storage() {\n        return storage;\n      },\n      get storageRef() {\n        return storageRef;\n      },\n      get uploadBytes() {\n        return uploadBytes;\n      },\n      get getDownloadURL() {\n        return getDownloadURL;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","onMounted","username","login","storage","storageRef","uploadBytes","getDownloadURL","placeholderImage","form","description","imagen_perfil","errorMessage","successMessage","imageUrl","userId","localStorage","getItem","triggerFileUpload","document","getElementById","click","onFileChange","e","file","target","files","type","uploadedImageUrl","uploadProfileImage","value","error","storageReference","name","Date","now","snapshot","downloadURL","console","response","fetch","profileData","json","nombre_usuario","descripcion","handleUpdate","method","headers","body","JSON","stringify","ok","Error","message"],"sources":["C:/Users/lozan/OneDrive/Documentos/GitHub/Recetas-De-Comida-Front/src/components/UserProfile.vue"],"sourcesContent":["<template>\r\n  <div class=\"profile-page\">\r\n    <div class=\"profile-container\">\r\n      <h2>Perfil de Usuario</h2>\r\n\r\n      <!-- Mostrar la imagen de perfil -->\r\n      <div class=\"profile-image-container\">\r\n        <img :src=\"imageUrl || placeholderImage\" alt=\"Imagen de perfil\" class=\"profile-image\" @click=\"triggerFileUpload\" />\r\n      </div>\r\n\r\n      <form @submit.prevent=\"handleUpdate\">\r\n        <input\r\n          type=\"file\"\r\n          id=\"imagen_perfil\"\r\n          ref=\"fileInput\"\r\n          @change=\"onFileChange\"\r\n          accept=\"image/jpeg, image/png\"\r\n          style=\"display: none;\"\r\n        />\r\n\r\n        <div class=\"input-group\">\r\n          <label for=\"username\">Nombre de Usuario:</label>\r\n          <input type=\"text\" id=\"username\" v-model=\"form.username\" required />\r\n        </div>\r\n\r\n        <div class=\"input-group\">\r\n          <label for=\"description\">Descripción:</label>\r\n          <textarea\r\n            id=\"description\"\r\n            v-model=\"form.description\"\r\n            placeholder=\"Añade una breve descripción de ti...\"\r\n          ></textarea>\r\n        </div>\r\n\r\n        <button type=\"submit\">Guardar Cambios</button>\r\n\r\n        <p v-if=\"successMessage\" class=\"success\">{{ successMessage }}</p>\r\n        <p v-if=\"errorMessage\" class=\"error\">{{ errorMessage }}</p>\r\n      </form>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref, onMounted } from 'vue';\r\nimport { username, login } from '../AuthStore'; // Importa `username` y `login`\r\nimport { storage } from \"../services/firebase\"; // Importa storage desde firebase.js\r\nimport { ref as storageRef, uploadBytes, getDownloadURL } from \"firebase/storage\"; // Importa funciones de Firebase Storage\r\n\r\nconst form = ref({\r\n  username: '',\r\n  description: '',\r\n  imagen_perfil: null,\r\n});\r\nconst errorMessage = ref('');\r\nconst successMessage = ref('');\r\nconst imageUrl = ref(''); // URL de la imagen de perfil\r\nconst userId = localStorage.getItem('userId'); // Recupera el userId del almacenamiento local\r\n\r\n// Aquí defines el placeholderImage como ruta para la imagen por defecto\r\nconst placeholderImage = '/avatar.png'; // Asegúrate de que esta ruta sea correcta\r\n\r\n// Función para abrir el selector de archivos al hacer clic en la imagen\r\nconst triggerFileUpload = () => {\r\n  document.getElementById(\"imagen_perfil\").click();\r\n};\r\n\r\n// Función para manejar el cambio de archivo\r\nconst onFileChange = async (e) => {\r\n  const file = e.target.files[0];\r\n  if (file && (file.type === 'image/jpeg' || file.type === 'image/png')) {\r\n    try {\r\n      // Llama a la función para subir la imagen y obtener la URL\r\n      const uploadedImageUrl = await uploadProfileImage(file);\r\n      if (uploadedImageUrl) {\r\n        imageUrl.value = uploadedImageUrl;\r\n        form.value.imagen_perfil = uploadedImageUrl; // Guarda la URL en el formulario\r\n      }\r\n    } catch (error) {\r\n      errorMessage.value = 'Error al subir la imagen';\r\n    }\r\n  } else {\r\n    errorMessage.value = 'Solo se permiten archivos JPEG o PNG';\r\n  }\r\n};\r\n\r\n// Función para subir la imagen de perfil a Firebase Storage\r\nconst uploadProfileImage = async (file) => {\r\n  try {\r\n    // Crea una referencia de almacenamiento única para la imagen\r\n    const storageReference = storageRef(storage, `profile_images/${file.name}-${Date.now()}`);\r\n    \r\n    // Sube la imagen a Firebase Storage\r\n    const snapshot = await uploadBytes(storageReference, file);\r\n    \r\n    // Obtén la URL de descarga de la imagen\r\n    const downloadURL = await getDownloadURL(snapshot.ref);\r\n    return downloadURL;\r\n  } catch (error) {\r\n    console.error(\"Error al subir la imagen:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Cargar datos del perfil al montar el componente\r\nonMounted(async () => {\r\n  try {\r\n    const response = await fetch(`http://localhost:4000/api/profile/${userId}`);\r\n    const profileData = await response.json(); // Cambié 'data' a 'profileData'\r\n    form.value.username = profileData.nombre_usuario; // Usa 'profileData'\r\n    form.value.description = profileData.descripcion || '';\r\n    imageUrl.value = profileData.imagen_perfil ? profileData.imagen_perfil : placeholderImage;\r\n  } catch (error) {\r\n    errorMessage.value = 'Error al cargar el perfil';\r\n  }\r\n});\r\n\r\nconst handleUpdate = async () => {\r\n  try {\r\n    const response = await fetch(`http://localhost:4000/api/profile/${userId}`, {\r\n      method: 'PUT',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(form.value), // Enviar el objeto form como JSON\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error('Error en la solicitud al servidor');\r\n    }\r\n\r\n    await response.json(); // Se eliminó la asignación a 'data' que no se usaba\r\n    successMessage.value = 'Perfil actualizado con éxito';\r\n    errorMessage.value = '';\r\n\r\n    // Actualiza el nombre de usuario global\r\n    login({ username: form.value.username });\r\n    username.value = form.value.username; // Actualiza también el `username`\r\n  } catch (error) {\r\n    errorMessage.value = 'Error en el servidor: ' + error.message;\r\n    successMessage.value = '';\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n\r\n.profile-container {\r\n  max-width: 500px;\r\n  margin: 0 auto;\r\n  padding: 20px;\r\n  border: 1px solid #ccc;\r\n  border-radius: 10px;\r\n  background-color: #f9f9f9;\r\n  text-align: center;\r\n  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.8);\r\n  width: 100%;\r\n  background-color: rgba(222, 222, 222, 0.9);\r\n  \r\n\r\n}\r\n.profile-page{\r\n  background-image: url('https://images.pexels.com/photos/2773606/pexels-photo-2773606.jpeg');\r\n  margin: 0;\r\n  padding: 100px;\r\n  background-size: cover;\r\n  background-position: center;\r\n  background-repeat: no-repeat;\r\n  height: 100vh;\r\n  justify-content: center;\r\n  align-items: center;\r\n  box-sizing: border-box;\r\n}\r\n\r\n\r\n.profile-image-container {\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.profile-image {\r\n  width: 150px;\r\n  height: 150px;\r\n  border-radius: 50%;\r\n  cursor: pointer;\r\n}\r\n\r\nh2 {\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.input-group {\r\n  margin-bottom: 15px;\r\n}\r\n\r\nlabel {\r\n  display: block;\r\n  font-weight: bold;\r\n  margin-bottom: 5px;\r\n}\r\n\r\ninput[type=\"text\"],\r\ntextarea {\r\n  width: 100%;\r\n  padding: 10px;\r\n  border: 1px solid #ccc;\r\n  border-radius: 5px;\r\n}\r\n\r\nbutton {\r\n  width: 100%;\r\n  padding: 10px;\r\n  background-color: #007BFF;\r\n  color: white;\r\n  border: none;\r\n  border-radius: 5px;\r\n  cursor: pointer;\r\n  font-size: 16px;\r\n  transition: background-color 0.3s;\r\n}\r\n\r\nbutton:hover {\r\n  background-color: #0056b3;\r\n}\r\n\r\n.error {\r\n  color: red;\r\n  margin-top: 10px;\r\n  font-size: 14px;\r\n}\r\n\r\n.success {\r\n  color: green;\r\n  margin-top: 10px;\r\n  font-size: 14px;\r\n}\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}